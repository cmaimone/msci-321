---
title: "Tables"
output:
  html_document:
    df_print: paged
    code_download: TRUE
    toc: true
    toc_depth: 1
editor_options:
  chunk_output_type: console
---


## Setup

```{r}
library(tidyverse)
library(janitor)
library(gt)
```

Using the cervical cancer dataset:

```{r}
cer <- read_csv("data/cervical_cancer_data.csv")
```

# janitor::tabyl

## Basic count tables with tabyl

dplyr is great for counting, but it doesn't have built in ways to add totals columns, or format percentages, or do many of the other operations you want when formatting data into a table to share with others.  Fortunately, many other people have also found this to be a pain, so they've developed packages to help us.

One option is the tabyl() function from the janitor package.  It uses the basic tidyverse format where it expects a data frame as the first element, and then you specify columns without quotes:

```{r}
tabyl(cer, Is_Diagnosed)
```

To do the same thing with dplyr:

```{r}
cer %>%
  group_by(Is_Diagnosed) %>%
  summarize(n=n(),
            percent = n/nrow(cer))
```

tabyl() with a single variable gives you counts and percentages by default.  But if we do a 2 dimensional table, we just get counts by default:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD)
```

The first variable is down the rows, the second is the columns.  Unlike table(), it includes missing values by default. 

What about 3 variables?

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD, Is_Diagnosed_with_STDs)
```

We get a series of tables: first variable is the rows, second is the columns, third is how we break out the tables.  

Because tabyl() takes a data frame as the first input, it works well with other dplyr or tidyverse functions.  For example, if I want a table of only a subset of my data, or a want modify a variable first, I can do that:

```{r}
cer %>%
  filter(!is.na(Is_On_IUD)) %>%
  tabyl(Is_Diagnosed, Is_On_IUD)
```

```{r}
cer %>%
  mutate(over25 = Age_of_Respondents > 25) %>%
  tabyl(Is_Diagnosed, over25)
```


The result of a call to tabyl() is also a data frame, so we could also manipulate it after:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD)

tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  select(-NA_)
```


## Adding Totals

That's helpful, but we can count things with dplyr or table().  Adding additional information is where it gets useful.  The janitor package adds a series of functions that start with "adorn_":

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_totals()  # defaults to adding a totals row
```

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_totals(where="col")
```

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_totals(where="both")
```



## Adding Percentages

If we want percentages instead of counts, we can do that:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages()
```

By default, this computed percentages across the rows, so the values in each row add to 1.  We can change this:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages(denominator = "col")
```

### Rounding

These can be a little hard to read.  So the first thing we can do, either with percentages or with other decimal values, is round the values:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_rounding()
```

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_rounding(digits = 2)
```

### Adding % sign

Or, instead of displaying these as proportions, we can display with %

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting()
```

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0)
```


### Adding back in counts

Sometimes we want both percentages and counts.  We can do that.  We make a basic table, add percentages, and then add the counts back in (yes, a little counterintuitive to remove the counts and then add them back, but it's how it works).

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_ns()
```

We can also use it with formatting too:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0) %>%
  adorn_ns()
```



# Formatting with gt

tabyl() is great, but it's producing tables for console output.  If we want to create tables we can copy into a Word document (or other formats, like markdown or LaTeX), the gt package (great tables) plays nice with tabyl:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0) %>%
  adorn_ns() %>%
  gt()
```

This opens in the viewer pane in RStudio, because it's default html output.

Word output:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0) %>%
  adorn_ns() %>%
  gt() %>%
  gtsave("mytable.docx")  # it infers from the file extension
```

There are many other formatting functions as well.  Here's the documentation: https://gt.rstudio.com/reference/

## Whole Table Labels

Title (on top):

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0) %>%
  adorn_ns() %>%
  gt() %>%
  tab_header("Cervical Cancer Data")
```

Details at the bottom

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0) %>%
  adorn_ns() %>%
  gt() %>%
  tab_header("Cervical Cancer Data") %>%
  tab_source_note("Details about my dataset")
```


## Column Name Formatting

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0) %>%
  adorn_ns() %>%
  gt() %>% 
  cols_label(Is_Diagnosed = "Has a Diagnosis") %>% # old name = "new name"
  cols_hide(NA_)  # remove a column
```

## Other formatting

There are a lot of other formatting options too.  For example, text justification:

```{r}
tabyl(cer, Is_Diagnosed, Is_On_IUD) %>%
  adorn_percentages() %>%
  adorn_pct_formatting(digits = 0) %>%
  adorn_ns() %>%
  gt() %>% 
  cols_align(align = "center", 
             columns = everything()) %>% # uses select() syntax to choose columns
  cols_align(align = "left",
             columns = Is_Diagnosed) 
```


# gt with other data

gt plays nice with tabyl, but sometimes we have tables that aren't just counts.  gt can start from any data frame.  Here's one added into the package for demonstration: gtcars

```{r}
gt(gtcars)
```

```{r}
gtcars %>%
  group_by(mfr) %>%
  summarize(mean_hp = mean(hp),
            avg_cost = mean(msrp))

gtcars %>%
  group_by(mfr) %>%
  summarize(mean_hp = mean(hp),
            avg_cost = mean(msrp)) %>%
  gt()
```

```{r}
gtcars %>%
  group_by(mfr) %>%
  summarize(mean_hp = mean(hp),
            avg_cost = mean(msrp)) %>%
  gt() %>%
  fmt_number(decimals = 0) %>% # round
  fmt_currency(avg_cost, decimals = 0) # add $
```



# Other Table packages

There are other packages that are useful:

* kable and kableExtra are useful in R Markdown documents: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html
* stargazer, for making tables of statistical model output (especially regression models): https://cran.r-project.org/web/packages/stargazer/index.html
* gtsummary produces some standard tables of types that are often seen in clinical research publications: https://www.danieldsjoberg.com/gtsummary/ - great if it does what you need, a little tricky to customize
* modelsummary has functions for summarizing and visualizing data and statistical model results through tables and plots: https://modelsummary.com/



