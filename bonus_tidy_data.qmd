---
title: "Tidy Data"
output:
  html_document:
    df_print: paged
    code_download: TRUE
    toc: true
    toc_depth: 1
format:
  html:
    embed-resources: true
editor_options:
  chunk_output_type: console
---

# Setup

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```

In the week 3 materials, we talked very briefly about tidy data. At the core, we're looking for rectangles of data where:

-   Rows are observations
-   Columns are variables
-   Cells have a single value

But that still leaves a lot of flexibility and options.

# Not Tidy

The week 3 materials had an example of a data frame that is not in tidy format:

```{r}
classroom <- tribble(  # tribble is a function to manually create a tibble, which is an updated data frame
  ~name,    ~quiz_scores, ~final_grade,
  "Billy",  "67, 89, 82", "B",
  "Suzy",  "35, 48, 52", "C",
  "Lionel", "65, 79, 72", "B",
  "Jenny",  "99, 100, 95", "A",
  )
classroom

```

The main issue with the above data frame is that there are multiple quiz scores in the cells for the quiz_scores column. While there are ways to nest vectors or other contains inside a data frame, it's messy, leads to headaches, and should generally be avoided. So let's see how we can fix this.

# Make It Tidy

With a small data set like this, we could just fix this in our source data file (assuming we had one). But that often isn't an option with larger datasets, and we're learning R here! We'll write code to do it.

The first option people often think of is to make 3 quiz columns.

The `separate_wider_delim()` from the tidyr package gives us a fairly easy way to do this. The function does what the name says: separates values using a delimiter and puts the results wider (adds columns -- i.e. the data frame gets wider).

```{r}
classroom %>%
  separate_wider_delim(quiz_scores,  # column to separate
                       delim=", ",  # split on both the comma and training space
                       names=c("q1", "q2", "q3"))  # names for the new columns (easy because we know the number of them)
```

The output of the above is a data frame, because the function is part of the tidyverse and operates on the data frame. But we didn't yet change the dataframe because we didn't save the result. So let's do that:

```{r}
classroom <- classroom %>%
  separate_wider_delim(quiz_scores,  
                       delim=", ",  
                       names=c("q1", "q2", "q3")) 
classroom
```

This is now in a tidy format. BUT, the quiz scores are still of character (text) type. So let's make the numeric so we can do things like take an average.

We can convert each column specifically:

```{r}
classroom %>%
  mutate(q1 = as.numeric(q1),
         q2 = as.numeric(q2),
         q3 = as.numeric(q3))
```

But we'll soon learn that there's a small shortcut when we want to do the same thing with multiple columns - using `across()` to specify the columns, and then naming the function to use:

```{r}
classroom <- classroom %>%
  mutate(across(starts_with("q"), as.numeric))
classroom
```

# Make it Tidy Another Way

Great - we could work with the above, and do things like take the mean of each quiz. But what if we wanted the average across all of the quizzes? That would require the data to be in a different shape, where we have all of the quiz scores in a single vector or column. So how do we do that?

We can pivot the data -- which is a way to reshape it and change what's in a row and what's in a column. Above, each row corresponds to a single student -- the student is the unit of observation.

But we can make the quiz the unit of observation instead -- each row is a quiz result.

Making that change would mean that we'd increase the number of rows that we'll have in the data frame -- so we say we're making the data frame *longer*. More columns = wider; more rows = longer.

Here's what we're trying to get to:

| name  | quiz | score | final_grade |
|-------|------|-------|-------------|
| Billy | 1    | 67    | B           |
| Billy | 2    | 89    | B           |
| Billy | 3    | 82    | B           |
| Suzy  | 1    | 35    | C           |
| Suzy  | 2    | 48    | C           |

and so on...

Having the final grade repeated for each quiz is a little strange, but it won't hurt anything. A data frame in this format is still "tidy" - it just has a different shape (different number of rows and columns, different organization of the data).

How do we get there:

```{r}
classroom %>%
  pivot_longer(  # pivot_longer because we're reducing columns, increasing rows
    cols = starts_with("q"), # we can use select helpers here
    names_to = "quiz", # the name for a new column 
    values_to = "score"  # the name for a new column
  )
```

This is essentially what we're aiming at, although the "quiz" column above is a character vector that has a "q" still in front of it -- these "q1", "q2", "q3" values came from the old column names. In this case, it doesn't really hurt that the labels are "q1" and such instead of an actual 1 because they're just category labels, but if we wanted/needed to change it, we could.

We could do it after the pivot:

```{r}
classroom %>%
  pivot_longer(  # pivot_longer because we're reducing columns, increasing rows
    cols = starts_with("q"), # we can use select helpers here
    names_to = "quiz", # the name for a new column 
    values_to = "score"  # the name for a new column
  ) %>%
  mutate(quiz = as.numeric(str_remove(quiz, "q")))
```

Or there's actually an option to do it as part of the pivoting. But this option uses an anonymous function -- which we'll get to soon.

```{r}
classroom %>%
  pivot_longer(  # pivot_longer because we're reducing columns, increasing rows
    cols = starts_with("q"), # we can use select helpers here
    names_to = "quiz", # the name for a new column 
    values_to = "score",  # the name for a new column
    names_transform = \(x) as.numeric(str_remove(x, "q"))
  )
```

# Another Example

Here's another example that's a bit more complicated:

|        |        |     |        |     |        |     |        |     |
|--------|--------|-----|--------|-----|--------|-----|--------|-----|
|        | 1 min  |     |        |     | 5 min  |     |        |     |
| strain | normal |     | mutant |     | normal |     | mutant |     |
| A      | 111    | 170 | 375    | 384 | 277    | 234 | 207    | 466 |
| B      | 336    | 169 | 491    | 233 | 392    | 341 | 213    | 472 |

This is an example of how someone might write down some experimental results in a lab notebook. Many, many issues here – the biggest being that there are empty cells, so we don't have a complete rectangle of data. We're just assuming that the values in the third column (170, 169) are also normal and 1 minute measurements.

How do we address this?

Let's assess what information we have:

-   2 time period (1 minute and 5 minutes)
-   2 types: normal and mutant
-   2 strains: A & B
-   2 measurements for each combination of conditions

Like above, depending on what we want to do with the data, we could organize this in different ways

## Option 1

Here's an option that's fairly wide. This might be the shape we need for some analysis, but note how we are encoding important information about the data in the column names (the number of minutes):

|            |              |            |            |            |            |
|------------|--------------|------------|------------|------------|------------|
| **strain** | **genotype** | **min1_1** | **min1_2** | **min5_1** | **min5_2** |
| A          | normal       | 111        | 170        | 277        | 234        |
| A          | mutant       | 375        | 384        | 207        | 466        |
| B          | normal       | 336        | 169        | 392        | 341        |
| B          | mutant       | 491        | 233        | 213        | 472        |

## Option 2

To avoid having the number of minutes only available in the column name (and not as values in the dataset), we might want to make this a little longer - have just 2 numeric column, one for the first trial and one for the second.

|            |              |            |            |            |
|------------|--------------|------------|------------|------------|
| **strain** | **genotype** | **minute** | **trial1** | **trial2** |
| A          | normal       | 1          | 111        | 170        |
| A          | mutant       | 1          | 375        | 384        |
| A          | normal       | 5          | 277        | 234        |
| A          | mutant       | 5          | 207        | 466        |
| B          | normal       | 1          | 336        | 169        |
| B          | mutant       | 1          | 491        | 233        |
| B          | normal       | 5          | 392        | 341        |
| B          | mutant       | 5          | 213        | 472        |

## Option 3

But maybe the measurement number/trial number also has meaning. We could go to one row per measurement - this is our "longest" option. This is what we'd generally recommend as the way to store this data because all of the information about each measurement is clearly recorded in the data table. You might need to reshape the data from this format, but this gives you the clearest representation of the data.

|            |              |            |           |              |
|------------|--------------|------------|-----------|--------------|
| **strain** | **genotype** | **minute** | **trial** | **response** |
| A          | normal       | 1          | 1         | 111          |
| A          | normal       | 1          | 2         | 170          |
| A          | mutant       | 1          | 1         | 375          |
| A          | mutant       | 1          | 2         | 384          |
| A          | normal       | 5          | 1         | 277          |
| A          | normal       | 5          | 2         | 234          |
| A          | mutant       | 5          | 1         | 207          |
| A          | mutant       | 5          | 2         | 466          |
| B          | normal       | 1          | 1         | 336          |
| B          | normal       | 1          | 2         | 169          |
| B          | mutant       | 1          | 1         | 491          |
| B          | mutant       | 1          | 2         | 233          |
| B          | normal       | 5          | 1         | 392          |
| B          | normal       | 5          | 2         | 341          |
| B          | mutant       | 5          | 1         | 213          |
| B          | mutant       | 5          | 2         | 472          |
