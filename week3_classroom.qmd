---
output:
  html_document:
    df_print: paged
    code_download: TRUE
    toc: true
    toc_depth: 1
editor_options:
  chunk_output_type: console
---

# Recap

## Functions

Functions have a name. They optionally take one or more input values (arguments). They optionally return a value (or a more complicated object) or have a side effect (do something).

Example functions: `log`, `round`.

Note that you can nest function calls:

```{r}
log(16)
round(2.12345)
round(log(16))
```

In `round(log(16))` for example R first evaluates `log(16)` and then evaluates `round()` on that result.

How do you learn function names? See the [R Reference Card](https://cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf) for some basics. Otherwise, look at the documentation for the packages you're using, or tutorials for the type of analysis you want to do. Google is always there for you!

The inputs or arguments to a function have names. When we don't use the name, like above, it matches the values in order. But we can always use the argument name:

```{r}
round(3.1415, digits=2)
```

You can find the argument names in the Help or documentation page for the function. We'll look at these soon.

## Packages

R comes with lots of built-in basic functions (commands). But we almost always need to use functions from additional packages as well.

-   Packages contain additional functions, and sometimes data sets
-   Install packages once (for each major version of R)
-   To update a package, re-install it
-   Load packages in each R session where you want to use them

### Installing a package

-   RStudio often prompts you to install packages you're missing: if you open a file that uses a package that you don't have installed
-   Do NOT put installation commands in R scripts or R Markdown files (included below only because we're teaching)

```{r, installpackages, eval=FALSE}
# install a single package
install.packages("praise")

# install a few at once (put names in a vector)
install.packages(c("palmerpenguins", "tidyverse", "janitor"))
```

Packages are installed from a repository. CRAN (Comprehensive R Archive Network) is the most common. People also install packages from Bioconductor and GitHub (process differs for these).

The Packages tab in the bottom right of RStudio can help you install and update packages.

If you're asked a question about whether you want to install packages from source, say NO. This is because installing from source requires compiling into computer-readable documents which take time. If you say NO then R uses a pre-compiled version.

### EXERCISE

Write code to install these packages:`praise`, `palmerpenguins`, `janitor`, `tidyverse`, `RColorBrewer`, `ggpubr`, `gridExtra`, and `grid`.

```{r, installpackagesworkshop, eval=FALSE}

```

### Using Packages

Packages have additional functions in them. Go to the Packages tab to take a look. Click on a package name to pull up the package index.

To use a package in your current session, use the `library()` function to load all of the functions (and other objects) in the package into your environment. You need a separate library command for each package. You do not need quotes around the package names. Put these at the top of your script or R Markdown file so people (collaborators or your future self) can see which packages are needed for the code.

Only load the packages you need. Packages can conflict with each other, so don't load ones you aren't using.

```{r}
library(praise)
library(palmerpenguins)
```

Now that we loaded `praise`, we can use functions within it!

```{r}
praise()
```

# Importing Data

## Reading in a Data File

Most of the time, you'll read in data from a file. For example:

```{r}
cer <- read.csv("data/cervical_cancer_data.csv")
```

Most data in R will be stored in a data frame (more below).

As with other variables, when we type the name of the data frame, it will print the contents of the variable to the console.

```{r, eval=FALSE}
cer
```

Note: This dataset is composed of responses from 858 patients and 36 variables focusing on the prediction of indicators or diagnosis of cervical cancer. The dataset provides demographic information, habits, and historic medical records of the 858 patients from Hospital Universitario de Caracas in Caracas, Venezuela. Look at the reference document inside the data folder for more information.

**TIPS**: if you get an error message that a file can't be found when you're trying to import it:

1)  Check the spelling of the filename for typos

2)  Check your working directory (`getwd()`) and make sure the path to the file is correct and completely specified given what your working directory is.

3)  Make sure you extracted the contents of the .zip file you downloaded. We've seen some problems on Windows computers especially where a .zip file isn't really unzipped - it's just letting you see inside without actually expanding the contents and creating real files. Right click on the file and look for an Extract All or similar option.

## From a Package

Today, we're going to work with data on penguins from <https://github.com/allisonhorst/palmerpenguins>. It's been included in an R package: palmerpenguins.

There's a data frame in the package called penguins. Like with functions in a package, we can use it once we've loaded the package with the library command above.

```{r}
penguins
```

## Manual Creation

It's also possible to create a data frame from scratch. You will not do this often.

```{r, manualdf}
month_info <- data.frame(
  month=month.name,
  index=1:12,                 
  days=c(31,28,31,30,31,30,31,31,30,31,30,31)
  )

month_info
```

# Data Frame Basics

-   Rectangles of data
-   Rows are observations
-   Columns are variables
-   Columns (variables) have names
-   Multiple vectors stuck together - each column is a vector
-   Each column has 1 type of data (numeric, character, logical, etc.)
-   Data frames can have columns with different types of data

## What is a data frame?

It has columns and rows. Let's look at it:

```{r, eval=FALSE}
View(cer)
```

Or we can look at a few rows in the console:

```{r}
head(cer)
```

What size is it?

```{r}
dim(cer)
nrow(cer)
ncol(cer)
```

What are the variables?

```{r}
names(cer)
```

What type of data is in each variable?

```{r}
str(cer)
```

Get some basic info about the variables:

```{r}
summary(cer)
```

### EXERCISE

Using the `penguins` data frame, write commands to figure out:

-   How many rows and columns it has?
-   What are the names of the variables?

```{r}
# load the package
library(palmerpenguins)


```

## Working with Variables

Each column (variable) is a vector. We can access them individually with the `$` notation using the name of each variable:

```{r}
cer$Age_of_Respondents
penguins$species
```

We can do things like count values, summarize numeric values, etc.

```{r}
table(cer$Number_of_Pregnancies)
median(month_info$days)
```

Notice that, by default, `table` doesn't include missing values. To see those, you need to add `useNA = "ifany"` or `useNA = "always"`.

```{r}
table(cer$Number_of_Pregnancies, useNA = "always")
```

We can also use the vectors in expressions:

```{r}
month_info$days/7
```

### EXERCISE

Import data from `"data/nu_degrees.csv"` and save it in a variable (choose an appropriate name).

View the data.

What is the average (the function is `mean()`) number of bachelor's degrees issued in a year?

What is the standard deviation in the number of doctoral degrees issued each year? The function is `sd()`.

How many total masters degrees were issued for the years in the data? Hint: `sum()`.

```{r}

```

Challenge: How many total degrees were issued each year? How many total degrees were issued across all years and types?

```{r}

```

## Computing summary measures {Remove from W3 - put in W1/2

Summary statistics provide a concise overview of the characteristics of a dataset, offering insights into its central tendency, dispersion, and distribution.

Base R provides several built-in functions for computing summary statistics, including summary(), mean(), median(), min(), max(), quantile(), sd(), and var().

```{r}
mean(penguins$bill_depth_mm)
median(penguins$bill_depth_mm)
sd(penguins$bill_depth_mm)
max(penguins$bill_depth_mm)
```

What happened here? NA values need to be explicitly ignored when calling the functions above.

```{r}
mean(penguins$bill_depth_mm, na.rm = TRUE)
median(penguins$bill_depth_mm, na.rm = TRUE)
sd(penguins$bill_depth_mm, na.rm = TRUE)
max(penguins$bill_depth_mm, na.rm = TRUE)
```

## EXERCISE

What is the minimum and maximum age of respondents in the cervical cancer dataset?

```{r}

```

## Making new columns

We can add a new column to the data frame by naming it with the `$` notation, and assigning a value to it. For example, make a column that has bill length in **centimeters (cm)** instead of **millimeters (mm)**

```{r}
names(penguins)
penguins$bill_length_cm <- penguins$bill_length_mm / 10  # make new variable: note CM instead of MM in the name
names(penguins)  # check to see that it was added
```

Columns will be added to the end (right).

```{r}
View(penguins)
```

We usually don't bother to reorder the variables, but we can by selecting them in the order we want:

```{r}
penguins <- penguins[ , c(
  "species",
  "island",
  "sex",
  "year",
  "bill_length_mm",
  "bill_length_cm",
  "bill_depth_mm",
  "flipper_length_mm",
  "body_mass_g"
  )
  ]

names(penguins)
View(penguins)
```

### EXERCISE

Using `month_info`: make a new variable as part of `month_info`, called `weeks`, that is the number of days divided by 7.

```{r}

```

Make a new column in the degrees data with the total number of degrees awarded each year

```{r}

```

Challenge: Make a new logical column called `long_month` that is TRUE if the month has 31 days

```{r}

```

## Indexing by Position: Vectors

We can access the individual values in vectors or data frames by their index position. We put the number of the element we want in `[]`.

Let's start with vectors:

```{r}
# create a dataframe
month_info <- data.frame(
  month=month.name,
  index=1:12,                 
  days=c(31,28,31,30,31,30,31,31,30,31,30,31)
  )

# get a column (i.e. a vector)
month_info$month
# index the vector
month_info$month[1]
```

We can also select a range of values:

```{r}
1:5  # shortcut for making a vector with values 1, 2, 3, 4, 5
c(1, 2, 3, 4, 5)
month_info$month[1:5]
```

Or non-adjacent values by using a vector of values. We can make our own vector with the `c()` function:

```{r}
c(1, 3, 5, 7, 9, 11)
month_info$month[c(1, 3, 5, 7, 9, 11)]
```

Negative indices mean to exclude the value at the given position:

```{r}
month_info$month[-1]
-1:-6
month_info$month[-1:-6]
month_info$days
table(month_info$days)

month_info$days[-2]
table(month_info$days[-2])
```

## Indexing Dataframes

### Indexing by Position

With data frames, there are two dimensions (rows and columns), so we need two indices:

```{r}
# df[rows, cols]
month_info
month_info[1, 1]
month_info[2, 1]
month_info[1, 2]
```

There is a shortcut if we want all rows or all columns -- we can leave one position blank:

Select first row

```{r}
month_info[1, ]
```

Select first two rows

```{r}
month_info[1:2, ]
```

Select first column

```{r}
month_info[ ,1]
```

This gave us a vector back, but with `penguins`:

```{r}
penguins[ ,1]
```

we get a data frame/tibble back. This is one difference between tibbles and regular data frames.

We can select rows and columns at the same time:

```{r}
month_info[6:7, 1:2]
```

If we want rows or columns that aren't next to each other, you can use a vector.

```{r}
month_info[c(1, 3), ]
```

### EXERCISE

Using the Northwestern degree data set from above: select rows 2 through 5, and columns 1 through 2

```{r}
degrees[2:5, 1:2]
```

### Indexing by Name

We've seen that we can reference columns by name with `$` notation (no quotes on names)

```{r}
names(month_info)

month_info$days
```

Note that the `$` notation got us a vector back.

```{r}
month_info$days
```

Use names in `[]`: put them in quotes

```{r}
month_info[ ,"days"]
```

With penguins (tibble), it stays as a tibble:

```{r}
penguins[ ,"bill_length_mm"]
```

Multiple columns by name, need to use a vector of names:

```{r}
c("month", "days")
month_info[ , c("month", "days")]

month_info[ 2:4 , c("days", "month")]
```

## Tidy data and Tidyverse

### Tidy Data

Tidy data is a consistent way to organise your data in R. Once you have tidy data and the tidy tools provided by packages in the tidyverse, you will spend much less time munging data from one representation to another, allowing you to spend more time on the analytic questions at hand.

There are 3 inter-related rules which make a dataset tidy:

1.  Each variable must have its own column
2.  Each observation must have its own row
3.  Each value must have its own cell

If you'd like to learn more about the underlying theory, you might enjoy the *Tidy Data* paper published in the Journal of Statistical Software, <http://www.jstatsoft.org/v59/i10/paper>.

### Setup

```{r, eval=TRUE}
library(tidyverse)
```

This gives you info on which packages it actually loaded, because when you install tidyverse, it installs \~25 packages plus dependencies, but it only loads the ones listed.

Tidyverse packages tend to be verbose in warning you when there are functions with the same name in multiple packages.

### Why use Tidyverse?

Tidyverse packages do a few things:

-   fix some of the annoying parts of using R, such as changing default options when importing data files and preventing large data frames from printing to the console
-   are focused on working with data frames --or rather tibbles-- (and their columns), rather than individual vectors
-   usually take a data frame/tibble as the first input to a function, and return a data frame/tibble as the output of a function, so that function calls can be more easily strung together in a sequence
-   share some common naming conventions for functions and arguments that have a goal of making code more readable
-   tend to be verbose, opinionated, and are actively working to provide more useful error messages

Tidyverse packages are particularly useful for:

-   data exploration

-   reshaping data sets

-   computing summary measures over groups

-   cleaning up different types of data

-   reading and writing data

-   predictive modeling

-   reporting results

### EXERCISE

Is the dataset `classroom` in a tidy data structure? Why or why not? What would you do make it tidy?

```{r}
classroom <- tribble(
  ~name,    ~quiz_scores, ~final_grade,
  "Billy",  "67, 89, 82", "B",
  "Suzy",  "35, 48, 52", "C",
  "Lionel", "65, 79, 72", "B",
  "Jenny",  "99, 100, 95", "A",
  )
classroom

```

## dplyr

dplyr is the core package of the tidyverse. It includes functions for working with tibbles (or any data frames). While you can still use base R operations on tibbles/data frames, such as using `$` and `[]` subsetting like we did above, dplyr provides alternatives to all of the common data manipulation tasks.

It contains six main functions, each a verb, of actions you frequently take with a data frame: select, filter, mutate, group_by, summarize, and arrange.

Before we start, let's remember what columns are in our data:

```{r}
names(cer)
```

## Select: choose columns

The `select()` function lets us choose which columns (or variables) we want to keep in our data.

The data frame is the first input, and the name of the column is the second. We do not have to put quotes around the column name.

```{r}
select(cer, Age_of_Respondents)
```

If we want to select additional columns, we can just list the column names as additional inputs, each column name separated by commas:

```{r}
select(cer, Age_of_Respondents, Number_of_Sexual_Partners, Is_Diagnosed_with_STDs)
```

As with `[]` indexing, columns will be returned in the order specified:

```{r}
select(cer, Is_Diagnosed_with_STDs, Number_of_Sexual_Partners, Age_of_Respondents)
```

We could also use the column index number if we wanted to instead. We don't need to put the values in `c()` like we would with `[]` (but we could).

```{r}
select(cer, 1, 4, 10)
```

To exclude columns:

```{r}
cer %>% 
  select(-Age_of_Respondents) %>% 
  names()
```

Finally, select can also be used to reorder columns, such as:

```{r}
cer %>% 
  select(Is_Diagnosed_with_STDs, everything()) %>% 
  names()
```

### EXERCISE

Convert this base R expression: `cer[ ,c("Is_Smoking", "Smoking_in_Years", "Smoking_in_Packs_per_Year")]` to use `select()` instead to do the same thing.

Hint: The base R expression above keeps all rows but selects only the three columns named within `c()`.

```{r}

```

## Mutate: add/modify columns

`mutate()` is used to both change the values of an existing column and make a new column.

We name the column we're mutating and set the value. If the name already exists, it will update the column. If the name doesn't exist, it will create a new variable (column is appended at the end of the existing columns).

```{r, eval=TRUE}
cer %>% 
  mutate(is_minor = Age_of_Respondents < 18) %>% 
  names # look at column names
```

We can put multiple mutations in the same call to mutate, with the expressions separated by commas:

```{r,  eval=TRUE}
cer %>% 
  mutate(is_minor = Age_of_Respondents < 18,
         is_senior = Age_of_Respondents > 65) %>% 
  names
```

### EXERCISE

Convert the column Is_Smoking to a logical data-type

Hint: Use `as.logical` for type-conversion.

```{r}

```

## Pipe: Chaining Commands Together

So, we can choose rows and choose columns separately; how do we combine these operations? `dplyr`, and other tidyverse commands, can be strung together in a series with a `%>%` (say/read: pipe) operator. (If you are familiar with working in a terminal/at the command line, it works like a bash pipe character `|`.) It takes the output of the command on the left and makes that the first input to the command on the right.

The pipe works well with dplyr (and other tidyverse packages) because the functions almost all take a data frame as the first input, and they return a data frame as the output.

We can rewrite

```{r}
select(cer, Age_of_Respondents, Number_of_Sexual_Partners)
```

as

```{r}
cer %>% select(Age_of_Respondents, Number_of_Sexual_Partners)
```

and you'll often see code formatted, so `%>%` is at the end of each line, and the following line that are still part of the same expression are indented:

```{r}
cer %>%
  select(Age_of_Respondents, Number_of_Sexual_Partners)
```

The pipe comes from a package called `magrittr`, which has additional special operators in it that you can use. The keyboard shortcut for `%>%` is command-shift-M (Mac) or control-shift-M (Windows).

We can use the pipe to string together multiple commands operating on the same data frame:

```{r}
cer %>%
  select(Age_of_Respondents, Number_of_Sexual_Partners) %>%
  mutate(is_minor = Age_of_Respondents < 18)
```

We would read the `%>%` in the command above as "then" if reading the code out loud: from cer, select Age_of_Respondents and Number_of_Sexual_Partners, then mutate to add a new column is_minor where Age_of_Respondents is less than 18.

This works because the dplyr functions take a tibble/data frame as the first argument (input) and return a tibble/data frame as the output. This makes it easy to pass a data frame through multiple operations, changing it one step at a time.

Order does matter, as the commands are executed in order. So this would give us an error, because we're trying to modify a column that we didn't select:

```{r}
cer %>%
  select(Is_Smoking, Smoking_in_Packs_per_Year) %>%
  mutate(is_minor = Age_of_Respondents < 18)
```

We'd have to reverse the order:

```{r}
cer %>%
  mutate(is_minor = Age_of_Respondents < 18) %>% 
  select(Age_of_Respondents, Smoking_in_Packs_per_Year)
```

You can use the pipe operator to string together commands outside of the tidyverse as well, and it works with any input and output, not just data frames:

```{r}
# mean(is.na(cer$Number_of_Years_with_STDs))
is.na(cer$Number_of_Years_with_STDs) %>% mean()

# or
cer$Number_of_Years_with_STDs %>% is.na() %>% mean()
```

Note that so far, we haven't actually changed the `cer` data frame at all. We've written expressions to give us output, but we haven't saved it.

Sometimes we may still want to save the result of some expression, such as after performing a bunch of data cleaning steps. We can assign the output of piped commands as we would with any other expression:

```{r}
cer_minors <- cer %>%
  filter(is_minor = Age_of_Respondents < 18) %>%
  select(Is_Diagnosed_with_STDs, Is_Smoking) 
```

### 
