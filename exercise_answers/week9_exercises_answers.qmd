---
title: "Week 9 Exercises (Answers)"
format: html
project:
  execute-dir: project
editor_options: 
  chunk_output_type: console
---


```{r}
library(tidyverse)
library(janitor)
```

Load `data/diabetes.csv`.  Basic information on the dataset is available here: https://hbiostat.org/data/repo/diabetes


```{r}
diabetes <- read_csv("data/diabetes.csv")
```



## Exercise

Make a scatterplot of bp.1s vs. bp.2s.  Set the plot labels and title.  Add a fitted line.

```{r}
ggplot(diabetes, aes(bp.1s, bp.2s)) +
  geom_point() +
  geom_smooth(method="lm") + 
  labs(title="Blood Pressure Readings",
       x="Systolic",
       y="Diastolic")
```


## Exercise

Make a bar plot of gender

```{r}
ggplot(stress, aes(gender)) + 
  geom_bar()
```


## Exercise

Make a histogram of age.  Set the number of bins or binwidth to make sense for the data.

Set the x axis range to be 18 to 100

```{r}
ggplot(stress, aes(age)) +
  geom_histogram(binwidth=5, center=2.5) + # sets 5 year bins, centered on 42.5, 47.5, etc.
  scale_x_continuous(limits = c(18, 100))
```


## Exercise

Plot height vs. weight, faceted by frame type.

Then, remove the observations where frame is missing from the plot.  Hint: one way to do this is to use dplyr filter() function, and pipe the result into ggplot (example at the very bottom of the week 9 materials).

```{r}
ggplot(diabetes, aes(height, weight)) +
  geom_point() + 
  facet_grid(frame ~ .)

diabetes %>%
  filter(!is.na(frame)) %>%
  ggplot(aes(height, weight)) +
  geom_point() + 
  facet_grid(frame ~ .)
```


## Challenge Exercise

Make a plot of height vs. weight faceted by both gender and frame type.  Put the categories in an appropriate order, and clean up missing data.

Make the plot again, switching which axis gender and frame are on.  Which version of the faceted plot do you find more useful?

```{r}
diabetes %>%
  filter(!is.na(frame)) %>%
  mutate(frame = factor(frame, levels=c("small", "medium", "large"))) %>%
  ggplot(aes(height, weight)) +
  geom_point() + 
  facet_grid(frame ~ gender)

diabetes %>%
  filter(!is.na(frame)) %>%
  mutate(frame = factor(frame, levels=c("small", "medium", "large"))) %>%
  ggplot(aes(height, weight)) +
  geom_point() + 
  facet_grid(gender ~ frame)
```


## Exercise

Make a bar plot of frame type.  Style it to remove the background and the grid lines

```{r}
ggplot(diabetes, aes(frame)) +
  geom_bar() + 
  theme_minimal() + 
  theme(panel.grid = element_blank())
```


## Exercise

Make a boxplot of waist-hip ratio for each frame type.

Then, make sure the frame types show up in the order of small, medium, large.  Remove observations missing a frame type

```{r}
ggplot(diabetes, aes(y=waist/hip, x=frame)) +
  geom_boxplot()

diabetes %>%
  filter(!is.na(frame)) %>%
  mutate(frame = factor(frame, levels=c("small", "medium", "large"))) %>%
  ggplot(aes(y=waist/hip, x=frame)) +
  geom_boxplot()
```


## Exercise

Plot height vs. weight and color the points by frame type.

```{r}
ggplot(diabetes, aes(height, weight, color=frame)) +
  geom_point()
```



## Challenge Exercise

Use color scales, themes, and any other settings to make this the ugliest plot you can.

```{r}
ggplot(diabetes, aes(chol, hdl)) +
  geom_point(shape=13, color="blue", size=3) + 
  labs(title="Cholesterol",
       y="HDL",
       x="Total Cholesterol") + 
  scale_x_continuous(limits=c(-50, 1000)) + 
  scale_y_continuous(limits=c(-200,300)) +
  theme(panel.background = element_rect(fill="red"),
        panel.grid.major = element_line(size=2, color="purple"),
        panel.grid.minor = element_line(linetype="dashed", color="green"),
        text = element_text(family="Papyrus", color="pink", size=20),
        plot.background = element_rect(fill="hotpink"),
        axis.text = element_text(color="orange"))
```


## Exercise

Make a bar plot showing the average stab.glu reading for each gender.

Hint: `geom_bar(stat="identity")` when you're supplying the heights of the bars instead of asking ggplot to count how many observations.

```{r}
diabetes %>%
  group_by(gender) %>%
  summarize(mean_glu = mean(stab.glu, na.rm=TRUE)) %>%
  ggplot(aes(gender, mean_glu)) +
  geom_bar(stat="identity")
```


## Challenge Exercise

You might be tempted to put error bars on the plot above - don't!!!  A better option is to plot a point and a range.  See https://ggplot2.tidyverse.org/reference/geom_linerange.html -- you might need to look up more help for this.  

Plot the mean stab.glu for each gender, with a 95% confidence interval around each mean.

```{r}
diabetes %>%
  group_by(gender) %>%
  summarize(mean_glu = mean(stab.glu, na.rm=TRUE),
            sd_glu = sd(stab.glu, na.rm=TRUE)/sqrt(n()),
            lower_ci = mean_glu - 1.96*sd_glu,
            upper_ci = mean_glu + 1.96*sd_glu) %>%
  ggplot(aes(y=mean_glu, x=gender, ymin=lower_ci, ymax=upper_ci)) +
  geom_pointrange()
```



## Challenge Exercise

Make a new variable turning glyhb into a categorical variable with more than 2 categories.  Then make an appropriate plot of stab.glu as a function of the new variable. 

```{r}
# there are a lot of options.  Here's one
diabetes$a1c_cat <- floor(diabetes$glyhb) %>%
  factor()

diabetes %>%
  filter(!is.na(a1c_cat)) %>%
  ggplot(aes(y=stab.glu, x=a1c_cat)) + 
  geom_boxplot()

# or, fewer categories
diabetes <- diabetes %>%
  mutate(a1c_cat2 = case_when(glyhb < 7 ~ "< 7",
                              glyhb < 10 ~ "7-10",
                              !is.na(glyhb) ~ "10+",
                              TRUE ~ NA_character_))
diabetes %>%
  filter(!is.na(a1c_cat)) %>%
  mutate(a1c_cat2 = factor(a1c_cat2, levels=c("< 7", "7-10", "10+"))) %>%
  ggplot(aes(y=stab.glu, x=a1c_cat2)) + 
  geom_boxplot()
```

